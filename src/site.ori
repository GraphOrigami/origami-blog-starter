{
  // Define a pipeline that starts with the folder of markdown content and
  // applies a series of transformations to process them into a form that's
  // ready to be displayed on the home page and individual post pages.
  processed = content
    // Translate markdown to HTML and replace `.md` extension with `.html`.
    → @mapFn(@mdHtml)
    // Rename files to slugs and add a `date` field parsed from the filename.
    → @mapFn({
      key: (post, fileName) => @slug(fileName)
      value: (post, fileName) => @merge(
        post,
        @regexParse(fileName, "^(?<date>\\d\\d\\d\\d-\\d\\d-\\d\\d) ")
      )
    })
    // Add next/previous keys. The posts are already in chronological order
    // because their names start with a YYYY-MM-DD date, so we can determine the
    // next and previous posts by looking at the adjacent posts in the list. We
    // need to do this before sorting in reverse order in the next step, which
    // will flip the order of the posts.
    → @addNextPrevious
    // Finally, sort in reverse chronological order.
    → @reverse
  
  // Turn the posts into a feed.
  feed = feed.ori(processed)

  // Construct the site's tree of public resources to deploy.
  public = {
    // About page
    about.html = page.ori(@mdHtml(about.md))

    // Stylesheet and images
    assets

    // Index page lists all posts
    index.html = index.ori(@mdHtml(index.md), processed)

    api = {
      all: @map(@paginate(processed, 3), {
        key: (page, pageNumber) => `${pageNumber}.json`
        value: @json
      })
      posts: @map(processed, {
        extension: "html→json"
        value: @json
      })
    }

    pages = @map(@paginate(processed, 3), listPage.ori)

    // The posts area contains one page for each post
    posts = @merge(
      {
        // If user tries to open `/posts`, redirect to `/`.
        index.html = @redirect("..")
      }
      @map(processed, postPage.ori)
    )

    // Feeds
    feed.json = @json(feed)
    rss.xml = @rss(feed)
  }

  // From the above, we return the `public` tree as the program's output.
}/public
