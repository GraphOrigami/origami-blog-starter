# Templates use the following global variables.
# Update these with your own values.
title = "Hello Graph Origami!"
description = "A simple Graph Origami blog, built with Glitch. Remix to get your own."
customDomain = "https://origami-blog-starter.glitch.me/"

# Create the HTML bodies for the pages. We first inline any expressions in {{…}}
# curly braces. This lets individual markdown pages like index.md create a list
# of links to the posts. We then convert the markdown to HTML.
bodies = @map/values(
  content,
  =@mdHtml(@inline(@value)),
  { deep: @true, extension: "md→html" }
)

# Render the page bodies with a template. If the page has a `template` property,
# use that, otherwise use the postPage.ori template. This arrangement avoids the
# need to specify the template for every post.
pages = @map/values(
  bodies,
  =@or(template, templates/postPage.ori)(@value),
  { deep: @true, extension: "html" }
)

# Define the overall public site.
#
# We store the posts index outside of the posts folder because it shouldn't
# appear in lists of posts. Here we merge the posts index into the public graph
# as posts/index.html so that someone visiting posts/ will see the index.
public = @graph/mergeDeep(pages, {
  posts = {
    index.html = pages/posts.html
  }
})

# Sort the posts by date. By default, we'll sort the oldest first. We sort the
# keys in bodies/posts and not pages/posts, because the post template references
# the displayOrder below, which references postsByDate and would therefore
# create a circular reference.
postsByDate = @graph/sort(bodies/posts, =date)

# The display order used in lists of posts. If you want the newest posts listed
# first, comment out the first formula and uncomment the second.
displayOrder = postsByDate
# displayOrder = @graph/reverse(postsByDate)
